1-)import pandas as pd

data = {
    'personel': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'],
    'maaş': ['normal', 'yüksek', 'düşük', 'yüksek', 'düşük', 'yüksek', 'düşük', 'düşük', 'düşük', 'yüksek', 'düşük'],
    'deneyim': ['orta', 'yok', 'yok', 'orta', 'orta', 'iyi', 'iyi', 'orta', 'orta', 'iyi', 'iyi'],
    'görev': ['uzman', 'uzman', 'yönetici', 'yönetici', 'yönetici', 'yönetici', 'yönetici', 'uzman', 'uzman', 'uzman', 'uzman'],
    'memnun': ['evet', 'evet', 'evet', 'evet', 'evet', 'evet', 'evet', 'hayır', 'hayır', 'hayır', 'hayır']
}

df = pd.DataFrame(data)


styled_df = df.style.set_properties(**{'text-align': 'left'}) \
    .set_table_styles([{
        'selector': 'th',
        'props': [
            ('text-align', 'center'),
            ('font-weight', 'bold'),
            ('border', '1px solid')
        ]
    }, {
        'selector': 'td',
        'props': [
            ('border', '1px solid')
        ]
    }])


print(styled_df)



2-)
import pandas as pd

data = {
    'age': ['<=30', '<=30', '31...40', '>40', '>40', '>40', '31...40', '<=30', '<=30', '>40', '<=30', '<=30', '31...40', '31...40', '>40'],
    'income': ['high', 'high', 'high', 'medium', 'low', 'low', 'low', 'medium', 'low', 'medium', 'medium', 'low', 'medium', 'high', 'medium'],
    'student': ['no', 'no', 'no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'no', 'no', 'no'],
    'credit_rating': ['fair', 'excellent', 'fair', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'fair', 'excellent', 'excellent', 'fair', 'excellent', 'fair', 'excellent'],
    'comp': ['no', 'no', 'yes', 'no', 'yes', 'no', 'yes', 'no', 'no', 'no', 'yes', 'no', 'yes', 'yes', 'no']
}

df = pd.DataFrame(data)
print(df)
p_yes = 9/14
p_no = 5/14
p_age_genc_given_yes = 2/9
p_age_genc_given_no = 3/5
p_income_medium_given_yes = 4/9
p_income_medium_given_no = 1/5
p_student_yes_given_yes = 6/9
p_student_yes_given_no = 2/5
p_credit_rating_fair_given_yes = 6/9
p_credit_rating_fair_given_no = 2/5

p_x_given_yes = p_age_genc_given_yes * p_income_medium_given_yes * p_student_yes_given_yes * p_credit_rating_fair_given_yes * p_yes
p_x_given_no = p_age_genc_given_no * p_income_medium_given_no * p_student_yes_given_no * p_credit_rating_fair_given_no * p_no

p_yes_given_x = p_x_given_yes / (p_x_given_yes + p_x_given_no)
p_no_given_x = p_x_given_no / (p_x_given_yes + p_x_given_no)

print("P(buyscomputer='yes' | X) = ", p_yes_given_x)
print("P(buyscomputer='no' | X) = ", p_no_given_x)

if p_yes_given_x > p_no_given_x:
    print("Kişi bilgisayar alabilir.")
else:
    print("Kişi bilgisayar alamaz.")


3-)
import pandas as pd

data = {
    'x': [1, 2, 2, 3, 4, 5, 6, 8, 10, 11],
    'y': [3, 5, 3, 9, 7, 2, 8, 6, 6, 1],
    'z': ['negatif', 'pozitif', 'pozitif', 'negatif', 'negatif', 'pozitif', 'pozitif', 'negatif', 'negatif', 'negatif']
}

df = pd.DataFrame(data)
print(df)

x_coords = df['x']
y_coords = df['y']

print("X Koordinatları:", x_coords)
print("Y Koordinatları:", y_coords)
import pandas as pd
import math

data = {
    'x': [1, 2, 2, 3, 4, 5, 6, 8, 10, 11],
    'y': [3, 5, 3, 9, 7, 2, 8, 6, 6, 1],
    'z': ['negatif', 'pozitif', 'pozitif', 'negatif', 'negatif', 'pozitif', 'pozitif', 'negatif', 'negatif', 'negatif']
}

df = pd.DataFrame(data)

new_x = 7
new_y = 3
df.loc[4, 'x'] = new_x
df.loc[4, 'y'] = new_y


df['distance'] = df.apply(lambda row: math.sqrt((row['x'] - new_x)**2 + (row['y'] - new_y)**2), axis=1)


df['proximity_order'] = df['distance'].rank()


print(df)
nearest_neighbors = df.nsmallest(3, 'proximity_order')
class_counts = nearest_neighbors['z'].value_counts()

if class_counts['negatif'] > class_counts['pozitif']:
    new_instance_class = 'negatif'
else:
    new_instance_class = 'pozitif'

print("Yeni örneğin sınıfı:", new_instance_class)


4-)
import pandas as pd

data = [15, 15, 16, 19, 19, 20, 20, 21, 22, 28, 35, 40, 41, 42, 43, 44, 60, 61, 65]
c1 = 16
c2 = 22

df = pd.DataFrame({'xi': data})
df['c1'] = c1
df['c2'] = c2
df['Distance 1'] = abs(df['xi'] - df['c1'])
df['Distance 2'] = abs(df['xi'] - df['c2'])
df['Nearest Cluster'] = df[['Distance 1', 'Distance 2']].idxmin(axis=1).apply(lambda x: x[-1])
df['New Centroid'] = df.groupby('Nearest Cluster')['xi'].transform('mean')

print(df)


import pandas as pd

data = [15, 15, 16, 19, 19, 20, 20, 21, 22, 28, 35, 40, 41, 42, 43, 44, 60, 61, 65]
c1 = 16
c2 = 22

df = pd.DataFrame({'xi': data})
df['c1'] = c1
df['c2'] = c2

for i in range(1, 5):
    df[f'Distance 1 Iteration {i}'] = abs(df['xi'] - df[f'c1 Iteration {i-1}'])
    df[f'Distance 2 Iteration {i}'] = abs(df['xi'] - df[f'c2 Iteration {i-1}'])
    df[f'Nearest Cluster Iteration {i}'] = df[[f'Distance 1 Iteration {i}', f'Distance 2 Iteration {i}']].idxmin(axis=1).apply(lambda x: x[-1])
    df[f'c1 Iteration {i}'] = df.groupby(f'Nearest Cluster Iteration {i}')['xi'].transform('mean')
    df[f'c2 Iteration {i}'] = df.groupby(f'Nearest Cluster Iteration {i}')['xi'].transform('mean')

columns_to_drop = ['Distance 1 Iteration 1', 'Distance 2 Iteration 1', 'Nearest Cluster Iteration 1']
for i in range(2, 5):
    columns_to_drop.extend([f'Distance 1 Iteration {i}', f'Distance 2 Iteration {i}', f'Nearest Cluster Iteration {i-1}'])
df = df.drop(columns=columns_to_drop)


new_columns = {'xi': 'xi', 
               'c1 Iteration 1': 'c1', 
               'c2 Iteration 1': 'c2',
               'Distance 1 Iteration 1': 'Distance 1', 
               'Distance 2 Iteration 1': 'Distance 2', 
               'Nearest Cluster Iteration 1': 'Nearest Cluster'}
for i in range(2, 5):
    new_columns[f'c1 Iteration {i}'] = f'c1 Iteration {i-1}'
    new_columns[f'c2 Iteration {i}'] = f'c2 Iteration {i-1}'
    new_columns[f'Distance 1 Iteration {i}'] = f'Distance 1 Iteration {i-1}'
    new_columns[f'Distance 2 Iteration {i}'] = f'Distance 2 Iteration {i-1}'
    new_columns[f'Nearest Cluster Iteration {i}'] = f'Nearest Cluster Iteration {i-1}'
df = df.rename(columns=new_columns)

print(df)



5-)
import numpy as np


X = np.array([[5.1, 3.5, 1.4, 0.2],
              [4.9, 3.0, 1.4, 0.2],
              [7.0, 3.2, 4.7, 1.4],
              [6.4, 3.2, 4.5, 1.5],
              [6.3, 3.3, 6.0, 2.5],
              [5.8, 2.7, 5.1, 1.9]])


y = np.array(['a', 'a', 'b', 'b', 'c', 'c'])


new_sample = np.array([5.0, 3.4, 1.5, 0.2])


X_with_bias = np.c_[np.ones(X.shape[0]), X] 
coefficients = np.linalg.inv(X_with_bias.T.dot(X_with_bias)).dot(X_with_bias.T).dot(y1)

new_sample_with_bias = np.insert(new_sample, 0, 1) 
predicted_class = np.dot(new_sample_with_bias, coefficients)

print("Tahmin edilen sinif:", predicted_class)
